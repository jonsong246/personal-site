{"version":3,"file":"static/js/177.5b67796c.chunk.js","mappings":"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","sources":["components/Contact/EmailLink.js","data/contact.js","components/Contact/ContactIcons.js","pages/Contact.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\n// Validates the first half of an email address.\nconst validateText = (text) => {\n  // NOTE: Passes RFC 5322 but not tested on google's standard.\n  // eslint-disable-next-line no-useless-escape\n  const re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\n  return re.test(text) || text.length === 0;\n};\n\nconst messages = [\n  'jonsong246@gmail.com',\n];\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay) {\n      const id = setInterval(() => {\n        savedCallback.current();\n      }, delay);\n      return () => clearInterval(id);\n    }\n    return () => {}; // pass linter\n  }, [delay]);\n};\n\nconst EmailLink = () => {\n  const hold = 50; // ticks to wait after message is complete before rendering next message\n  const delay = 50; // tick length in mS\n\n  const [idx, updateIter] = useState(0); // points to current message\n  const [message, updateMessage] = useState(messages[idx]);\n  const [char, updateChar] = useState(messages[idx].length); // points to current char\n  const [isActive, setIsActive] = useState(true); // disable when all messages are printed\n\n  useInterval(() => {\n    let newIdx = idx;\n    let newChar = char;\n    if (char - hold >= messages[idx].length) {\n      newIdx += 1;\n      newChar = 0;\n    }\n    if (newIdx === messages.length) {\n      setIsActive(false);\n    } else {\n      updateMessage(messages[newIdx].slice(0, newChar));\n      updateIter(newIdx);\n      updateChar(newChar + 1);\n    }\n  }, isActive ? delay : null);\n\n  return (\n    <div\n      className=\"inline-container\"\n      style={validateText(message) ? {} : { color: 'red' }}\n      onMouseEnter={() => setIsActive(false)}\n      onMouseLeave={() => (idx < messages.length) && setIsActive(true)}\n    >\n      <a href={validateText(message) ? `mailto:${message}` : ''}>\n        <span>{message}</span>\n      </a>\n    </div>\n  );\n};\n\nexport default EmailLink;\n","import { faGithub } from '@fortawesome/free-brands-svg-icons/faGithub';\nimport { faFacebookF } from '@fortawesome/free-brands-svg-icons/faFacebookF';\n// import { faInstagram } from '@fortawesome/free-brands-svg-icons/faInstagram';\nimport { faLinkedinIn } from '@fortawesome/free-brands-svg-icons/faLinkedinIn';\nimport { faEnvelope } from '@fortawesome/free-regular-svg-icons/faEnvelope';\n// See https://fontawesome.com/icons?d=gallery&s=brands,regular&m=free\n// to add other icons.\n\nconst data = [\n  {\n    link: 'https://github.com/jonsong246',\n    label: 'Github',\n    icon: faGithub,\n  },\n  {\n    link: 'https://www.facebook.com/jonathan.song.39/',\n    label: 'Facebook',\n    icon: faFacebookF,\n  },\n  {\n    link: 'https://www.linkedin.com/in/jon-song/',\n    label: 'LinkedIn',\n    icon: faLinkedinIn,\n  },\n  {\n    link: 'mailto:jonsong246@gmail.com',\n    label: 'Email',\n    icon: faEnvelope,\n  },\n];\n\nexport default data;\n","import React from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport data from '../../data/contact';\n\nconst ContactIcons = () => (\n  <ul className=\"icons\">\n    {data.map((s) => (\n      <li key={s.label}>\n        <a href={s.link}>\n          <FontAwesomeIcon icon={s.icon} />\n        </a>\n      </li>\n    ))}\n  </ul>\n);\n\nexport default ContactIcons;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Main from '../layouts/Main';\nimport EmailLink from '../components/Contact/EmailLink';\nimport ContactIcons from '../components/Contact/ContactIcons';\n\nconst Contact = () => (\n  <Main\n    title=\"Contact\"\n    description=\"Contact Jonathan Song @ jonsong246@gmail.com\"\n  >\n    <article className=\"post\" id=\"contact\">\n      <header>\n        <div className=\"title\">\n          <h2 data-testid=\"heading\"><Link to=\"/contact\">Contact</Link></h2>\n        </div>\n      </header>\n      <div className=\"email-at\">\n        <p>Feel free to get in touch. You can email me at: </p>\n        <EmailLink />\n      </div>\n      <ContactIcons />\n    </article>\n  </Main>\n);\n\nexport default Contact;\n"],"names":["validateText","text","test","length","messages","_useState","useState","_useState2","_slicedToArray","idx","updateIter","_useState3","_useState4","message","updateMessage","_useState5","_useState6","char","updateChar","_useState7","_useState8","isActive","setIsActive","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","newIdx","newChar","slice","_jsx","className","style","color","onMouseEnter","onMouseLeave","children","href","concat","link","label","icon","faGithub","faFacebookF","faLinkedinIn","faEnvelope","data","map","s","FontAwesomeIcon","Main","title","description","_jsxs","Link","to","EmailLink","ContactIcons"],"sourceRoot":""}